import React, { useState, useEffect } from "react";

const EmojiVoting = () => {
  const emojis = [
    { symbol: "üòä", votes: 0 },
    { symbol: "üòÇ", votes: 0 },
    { symbol: "üòç", votes: 0 },
    { symbol: "üòé", votes: 0 },
    { symbol: "ü•∫", votes: 0 },
  ];

  const [emojiVotes, setEmojiVotes] = useState(() => {
    try {
      const savedVotes = localStorage.getItem("emojiVotes");
      if (savedVotes) {
        return JSON.parse(savedVotes);
      } else {
        return emojis;
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ localStorage", e);
      return emojis;
    }
  });

  const [resultData, setResultData] = useState(null);

  useEffect(() => {
    try {
      localStorage.setItem("emojiVotes", JSON.stringify(emojiVotes));
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ localStorage", e);
    }
  }, [emojiVotes]);

  const handleVote = (symbol) => {
    const updatedVotes = emojiVotes.map((emoji) =>
      emoji.symbol === symbol ? { ...emoji, votes: emoji.votes + 1 } : emoji
    );
    setEmojiVotes(updatedVotes);
  };

  const handleShowResults = () => {
    const maxVotes = Math.max(...emojiVotes.map((emoji) => emoji.votes));
    if (maxVotes === 0) {
      setResultData({ message: "–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–≤.", emojis: [] });
      return;
    }
    const winners = emojiVotes.filter((emoji) => emoji.votes === maxVotes);
    setResultData({
      message: `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å—ñ–≤: ${maxVotes}`,
      emojis: winners.map((e) => e.symbol),
    });
  };

  const handleClearResults = () => {
    const resetVotes = emojis.map((emoji) => ({ ...emoji, votes: 0 }));
    setEmojiVotes(resetVotes);
    setResultData(null);
    localStorage.removeItem("emojiVotes");
  };

  return (
    <div className="emoji-voting">
      <h1 className="title">–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ —Å–º–∞–π–ª–∏–∫–∏</h1>
      <div className="emoji-list">
        {emojiVotes.map((emoji) => (
          <div
            key={emoji.symbol}
            className="emoji-item"
            onClick={() => handleVote(emoji.symbol)}
          >
            <span className="emoji">{emoji.symbol}</span>
            <div className="vote-count">–≥–æ–ª–æ—Å—ñ–≤: {emoji.votes}</div>
          </div>
        ))}
      </div>
      <div className="buttons">
        <button className="show-results" onClick={handleShowResults}>
          –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        </button>
        <button className="clear-results" onClick={handleClearResults}>
          –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        </button>
      </div>

      {resultData && (
        <div className="result">
          <div className="result-title">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:</div>
          <div className="winner-text">–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å(—ñ):</div>
          {resultData.emojis.length > 0 && (
            <div className="winners">
              {resultData.emojis.map((symbol) => (
                <span key={symbol} className="winner-emoji">
                  {symbol}
                </span>
              ))}
            </div>
          )}
          <div>{resultData.message}</div>
        </div>
      )}
    </div>
  );
};

export default EmojiVoting;
