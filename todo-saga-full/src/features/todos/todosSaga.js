import { takeEvery, call, put, select } from "redux-saga/effects";
import {
  getTodos,
  addTodo,
  deleteTodo,
  toggleTodo,
  editTodo,
} from "../../api/todoApi";
import {
  FETCH_TODOS,
  ADD_TODO,
  DELETE_TODO,
  TOGGLE_TODO,
  EDIT_TODO,
  CLEAR_COMPLETED_REQUEST,
  SYNC_WITH_LOCAL_STORAGE,
  CLEAR_LOCAL_STORAGE,
  setError,
} from "./todosActions";
import {
  fetchTodosSuccess,
  fetchTodosFailure,
  addTodoSuccess,
  deleteTodoSuccess,
  toggleTodoSuccess,
  editTodoSuccess,
  editTodoFailure, // üî• –¥–æ–±–∞–≤–∏–ª–∏
  setTasks,
} from "./todosSlice";
import {
  addTaskToLocalStorage,
  updateTaskInLocalStorage,
  deleteTaskFromLocalStorage,
  getTasksFromLocalStorage,
  clearTasksFromLocalStorage,
} from "../../utils/localStorageUtils";

// Worker –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
function* fetchTodosWorker(action) {
  try {
    const { page = 1, pageSize = 10 } = action.payload || {};
    const response = yield call(getTodos, page, pageSize);
    console.log("–û—Ç–≤–µ—Ç –æ—Ç API:", response);

    const tasks = response;

    if (Array.isArray(tasks)) {
      yield put(setTasks(tasks));
    } else {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
    yield put(setError(error.message));
  }
}

// Worker –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function* addTodoWorker(action) {
  try {
    const todo = action.payload;
    const createdTask = yield call(addTodo, todo);

    if (!createdTask) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");

    yield call(addTaskToLocalStorage, createdTask);
    yield put(addTodoSuccess(createdTask));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    yield put(
      fetchTodosFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    );
  }
}

// Worker –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function* deleteTodoWorker(action) {
  try {
    const taskId = action.payload;

    yield call(deleteTodo, taskId);
    yield call(deleteTaskFromLocalStorage, taskId);

    yield put(deleteTodoSuccess(taskId));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    yield put(fetchTodosFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"));
  }
}

// Worker –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
function* toggleTodoWorker(action) {
  try {
    const { id, completed } = action.payload;
    const updatedTask = yield call(toggleTodo, id, completed);

    if (!updatedTask) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏");

    yield call(updateTaskInLocalStorage, updatedTask);
    yield put(toggleTodoSuccess(updatedTask));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
    yield put(
      fetchTodosFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    );
  }
}

// üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π editTodoWorker
function* editTodoWorker(action) {
  try {
    const updatedTodo = action.payload;
    if (!updatedTodo || !updatedTodo.id || !updatedTodo.title) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    }

    const response = yield call(editTodo, updatedTodo.id, updatedTodo);

    if (response && response.id) {
      yield put(editTodoSuccess(response));
    } else {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    yield put(
      editTodoFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    );
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function* clearCompletedWorker() {
  try {
    const todos = yield select((state) => state.todos.tasks);

    if (!Array.isArray(todos)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á");
    }

    const completedTodos = todos.filter((todo) => todo.completed);

    for (const todo of completedTodos) {
      yield call(deleteTodo, todo.id);
      yield call(deleteTaskFromLocalStorage, todo.id);
      yield put(deleteTodoSuccess(todo.id));
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:", error);
    yield put(fetchTodosFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á"));
  }
}

function* syncWithLocalStorageWorker() {
  try {
    const tasks = yield call(getTasksFromLocalStorage);

    if (!Array.isArray(tasks)) {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞");
    }

    yield put(fetchTodosSuccess(tasks));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º:", error);
    yield put(fetchTodosFailure(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"));
  }
}

function* clearLocalStorageWorker() {
  try {
    yield call(clearTasksFromLocalStorage);
    yield put(fetchTodosSuccess([]));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", error);
    yield put(
      fetchTodosFailure(
        error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"
      )
    );
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Å–∞–≥–∞
export function* todosSaga() {
  yield takeEvery(FETCH_TODOS, fetchTodosWorker);
  yield takeEvery(ADD_TODO, addTodoWorker);
  yield takeEvery(DELETE_TODO, deleteTodoWorker);
  yield takeEvery(TOGGLE_TODO, toggleTodoWorker);
  yield takeEvery(EDIT_TODO, editTodoWorker);
  yield takeEvery(CLEAR_COMPLETED_REQUEST, clearCompletedWorker);
  yield takeEvery(SYNC_WITH_LOCAL_STORAGE, syncWithLocalStorageWorker);
  yield takeEvery(CLEAR_LOCAL_STORAGE, clearLocalStorageWorker);
}
